#Строка которая задает шаблон поиска подстрок в каком либо тексте. Т.е. одному шаблону может соответствовать много строчек в тексте
#шаблон по которому осущестявляется поиск
#
import re

s = 'AC/DCAC/DCAC/DCAC/DCAC/DCAC/DCAC/DC'
#Метод ищет совпадения в начале строки
result = re.match('DC', s)
print(result)
#Искать на протяжении всей строки и показывает первое найденное
result = re.search('DC', s)
print(result)
#Метод позволяющий искать список всех найденных подстрок в нашей строке и компанует в список
result = re.findall('DC', s)
print(result)
#Метод позволяющий разделить строчку по заданному выражению
result = re.split('/', s)
print(result)
#maxsplit= разбивает до конца maxsplit=3 разбивает первые три переменные
result = re.split('/', s, maxsplit=3)
print(result)
#заменяет регул выражение на что-то другое, одну подстроку заменяет на другую
result = re.sub('A', 'D', s)
print(result)
#Проверяет подходит ли весь шаблон под нашу строчку, просто сравнивает
result = re.fullmatch('A', s)
print(result)
#ЧАСТЬ 2!!!!!!!!
#Зачастую регул выраж примен не тогда когда у нас есть какая-то опред послед симв а тогда когда из нашей строки нужно найти набор символо отвеч опред правилам а не какой-то набор
#извлечь телефонные номера из справочника
s1 = '4554654fghggfd-03mdfk!@##$%^$&%^* g FDHJFJSGVADSfghgsf'
result = re.search(r'md.k', s1) #когда мы пишем шаблон для регулярного выражения нам необходимо использовать сырую строку она начинается с r
# означает что строка после r будет сырой это значит что в ней отключено экранирование если мы пишем /r то строка будет выводиться с новой строчки если /t то будет табуляция r это отключает.
print(result)#Точка здесь заменяет символ и игнорт его кроме символа новой строки
result = re.search(r'\d', s1) #Выводит любую цифру по очереди можно дублировать (при дубле выводит только цифры подряд)
print(result)
result = re.search(r'\D', s1) #Выводит любой символ первый который встретит
print(result)
result = re.search(r'\s', s1) #Выводит любой пробельный символ (Табуляция и т.п.) 
print(result)
result = re.search(r'\S', s1) #Найдет любой НЕ пробельный символ
print(result)
result = re.search(r'\w', s1) # Любая буква цифра или нижнее подчеркивание
print(result)
result = re.search(r'\W', s1) #Выводит НЕ букву НЕ цифру НЕ нижнее подчеркивание
print(result)
result = re.search(r'\bFD', s1) #Выводит начало или конец какого-либо слова FD ЭТО БУКВЫ НАЧАЛА СЛОВА
print(result)
result = re.search(r'\BFD', s1) #Не укажет границы слова потому-что перед указанными символами есть другеи символы
print(result)
result = re.search(r'\d*', s1) #Выводит 0 или более вхождения каких-то символов после нашей первой найденной цифры если я пишу \d+ то 1 или более вхождений
print(result)
result = re.search(r'[mdfk]', s1) #Выводит результат если встретится одна из перечисленных букв или диапазон [4-8]
print(result)
result = re.search(r'[^4-8]', s1) #Выводит все но кроме указанного диапазона
print(result)
result = re.search(r'H|z', s1) #Выводит либо один символ либо другой
print(result)
#Ко всему вышеперечисленному мы можем применить квантификаторы - кол-во повторений данного шаблона
result = re.search(r'\d{4}', s1) #Выводит \d 4 раза или диапазон {1,4} (выведет 3 числа) или не менне скольки-то повторений {5,} (не менее 5 подряд идущих цифр) {,5} (не более 5)
print(result)
#ПРИМЕР!!
s2 = "Привет! Как дела! А у меня нормально."
result = re.findall(r'[бвгджзиклмнпрстфхчшщБВГДЖЗИКЛМНПРСТФХЧШЩ]\w+', s2)#Ищет слова начинающиеся на буквы w+ значит что он будет искать все слово а не только расположение символов
print(result)